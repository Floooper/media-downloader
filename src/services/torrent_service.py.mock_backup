"""
Torrent Service - Mock implementation until libtorrent is properly installed
"""
import asyncio
from typing import Optional, Dict, List, Tuple
from dataclasses import dataclass
from datetime import datetime

@dataclass
class TorrentFile:
    path: str
    size: int
    priority: int
    progress: float = 0.0

@dataclass
class TorrentInfo:
    name: str
    total_size: int
    files: List[TorrentFile]
    info_hash: str
    save_path: str
    status: str
    progress: float = 0.0
    download_rate: float = 0.0
    upload_rate: float = 0.0
    num_peers: int = 0
    total_seeds: int = 0
    total_peers: int = 0
    pieces: int = 0
    downloaded_pieces: int = 0

class TorrentDownloader:
    """Mock torrent downloader - will be replaced with real implementation"""
    
    def __init__(self, 
                 max_connections_per_torrent: int = 50,
                 max_upload_rate: int = 0,
                 max_download_rate: int = 0,
                 listen_port: int = 6881):
        print("WARNING: Using mock torrent downloader. Install libtorrent for real functionality.")
        self.active_torrents: Dict[str, dict] = {}
        self.torrent_info: Dict[str, TorrentInfo] = {}

    async def process_magnet_link(self, magnet_link: str, save_path: str) -> str:
        """Mock process a magnet link"""
        download_id = f"mock_{hash(magnet_link) % 10000}"
        
        # Create mock torrent info
        self.torrent_info[download_id] = TorrentInfo(
            name=f"Mock Download {datetime.now().strftime('%H:%M:%S')}",
            total_size=1024 * 1024 * 100,  # 100MB mock size
            files=[
                TorrentFile(
                    path="mock_file.mkv",
                    size=1024 * 1024 * 100,
                    priority=1
                )
            ],
            info_hash=download_id,
            save_path=save_path,
            status='downloading',
            progress=0.0,
            pieces=1000
        )
        
        self.active_torrents[download_id] = {"status": "downloading"}
        return download_id

    async def process_torrent_file(self, torrent_data: bytes, save_path: str) -> str:
        """Mock process a .torrent file"""
        download_id = f"mock_file_{hash(torrent_data) % 10000}"
        
        self.torrent_info[download_id] = TorrentInfo(
            name="Mock Torrent File",
            total_size=1024 * 1024 * 50,  # 50MB mock size
            files=[
                TorrentFile(
                    path="mock_torrent_file.mp4",
                    size=1024 * 1024 * 50,
                    priority=1
                )
            ],
            info_hash=download_id,
            save_path=save_path,
            status='downloading',
            progress=0.0,
            pieces=500
        )
        
        self.active_torrents[download_id] = {"status": "downloading"}
        return download_id

    def get_torrent_status(self, download_id: str) -> Optional[TorrentInfo]:
        """Get mock torrent status"""
        if download_id not in self.torrent_info:
            return None
        
        info = self.torrent_info[download_id]
        
        # Simulate progress (slowly increasing)
        if info.status == "downloading" and info.progress < 100:
            info.progress = min(100.0, info.progress + 0.1)
            info.download_rate = 1024 if info.progress < 100 else 0  # 1KB/s mock speed
            info.num_peers = 5
            info.total_seeds = 10
            info.total_peers = 15
            info.downloaded_pieces = int((info.progress / 100) * info.pieces)
        
        return info

    async def start_download(self, download_id: str):
        """Mock start download"""
        if download_id in self.torrent_info:
            self.torrent_info[download_id].status = 'downloading'

    async def pause_download(self, download_id: str):
        """Mock pause download"""
        if download_id in self.torrent_info:
            self.torrent_info[download_id].status = 'paused'

    def set_file_priorities(self, download_id: str, file_priorities: Dict[int, int]):
        """Mock set file priorities"""
        if download_id in self.torrent_info:
            info = self.torrent_info[download_id]
            for file_index, priority in file_priorities.items():
                if 0 <= file_index < len(info.files):
                    info.files[file_index].priority = priority

    def get_progress(self, download_id: str) -> Optional[float]:
        """Get mock progress"""
        if download_id in self.torrent_info:
            return self.torrent_info[download_id].progress
        return None

    def remove_download(self, download_id: str, delete_files: bool = False):
        """Mock remove download"""
        if download_id in self.active_torrents:
            del self.active_torrents[download_id]
        if download_id in self.torrent_info:
            del self.torrent_info[download_id]
